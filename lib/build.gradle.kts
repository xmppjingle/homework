/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6/userguide/building_java_projects.html
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.7.10"

    // Apply the java-library plugin for API and implementation separation.
    `java-library`
}

group = "com.github.xmppjingle"
version = "0.0.1"
java.sourceCompatibility = JavaVersion.VERSION_1_9

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    maven { url = uri("https://jitpack.io") }
    maven { url = uri("https://dl.bintray.com/apache/arrow") }

}

dependencies {
    // Use the Kotlin JUnit 5 integration.
    testImplementation(kotlin("test-junit5"))

    // Use the JUnit 5 integration.
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.9.1")

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api("org.apache.commons:commons-math3:3.6.1")

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation("com.google.guava:guava:31.1-jre")

    // Smile
    implementation("com.github.haifengl:smile-core:2.6.0")
    implementation("com.github.haifengl:smile-kotlin:2.6.0")
    implementation("com.github.doyaaaaaken:kotlin-csv-jvm:0.15.1")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.11.3")
//    implementation("org.apache.arrow:arrow-memory:0.16.0")
//    implementation("org.apache.arrow:arrow-vector:0.16.0")

    // These are needed for regression i Smile.
    implementation(group="org.bytedeco", name="javacpp", version="1.5.3", classifier="macosx-x86_64")
    implementation(group="org.bytedeco", name="openblas", version="0.3.9-1.5.3", classifier="macosx-x86_64")
    implementation(group="org.bytedeco", name="arpack-ng", version="3.7.0-1.5.3", classifier="macosx-x86_64")
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks {

    val sourcesJar by creating(Jar::class) {
        archiveClassifier.set("sources")
        from(sourceSets.main.get().allSource)
    }

    val javadocJar by creating(Jar::class) {
        dependsOn.add(javadoc)
        archiveClassifier.set("javadoc")
        from(javadoc)
    }

    artifacts {
        archives(sourcesJar)
        archives(javadocJar)
        archives(jar)
    }

}